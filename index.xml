<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jkpark&#39;s blog</title>
    <link>https://jkpark.github.io/</link>
    <description>Recent content on jkpark&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 08 Jan 2021 13:41:34 +0900</lastBuildDate>
    
	<atom:link href="https://jkpark.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://jkpark.github.io/projects/hxcluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/projects/hxcluster/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jkpark.github.io/projects/d3s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/projects/d3s/</guid>
      <description>Watch samples  Vacine File Encryption Application Lock Block Spam Messages Remote Lock Remote Delete Contacts Remote Reset</description>
    </item>
    
    <item>
      <title>Jekyll to Hugo</title>
      <link>https://jkpark.github.io/blog/jekyll-to-hugo/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/jekyll-to-hugo/</guid>
      <description>Leave Jekyll 블로그를 처음 시작한다면 jekyll을 추천한다. github 에서 공식적으로 Jekyll을 추천하며 자료도 많아서 쉽게 시작할 수 있다. 나도 markdown형식 블로그로 갔을 때 jekyll을 선택했었고 jekyll로 운용한지 벌서 3년이 되었다.
그런데 jekyll을 쓰면서 불편한 점이 하나 있었다.
page tree 구조를 만들기 어렵다는 점.
홈 서버 관련 글들을 트리 형식으로 관리하고 싶었는데 jekyll에서는 그 방법이 복잡하게 되어있었다. 그래서 gitbook 에서 홈 서버 관련 블로그르 운영 하였지만 gitbook에서는 한글 입력 버그가 있고 테마도 수정하기 어려웠기 때문에 gitbook도 접게 되었다.</description>
    </item>
    
    <item>
      <title>Outlook 빠른 인덱싱</title>
      <link>https://jkpark.github.io/blog/outlook-fast-indexing/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/outlook-fast-indexing/</guid>
      <description>Outlook 빠른 인덱싱    windows 돋보기 - gpedit.msc 실행 컴퓨터구성 - 관리템플릿 - Windows 구성요소 - 검색 - 인덱서 백오프 사용안함 -&amp;gt; 사용 변경    아웃록 - 파일 - 계정설정 - 데이터파일 - pst데이터 파일 위치 확인
  아웃룩 - 파일 - 옵션 - 검색 - 인덱싱 옵션 - 수정 - pst파일위치 체크 - 확인 - 고급 - 다시색인 - 확인
  </description>
    </item>
    
    <item>
      <title>Install Burp Suite v2.0</title>
      <link>https://jkpark.github.io/blog/burpsuite-v2/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/burpsuite-v2/</guid>
      <description>Requirement 먼저 JDK가 설치되어 있어야 한다. jdk11 설치방법을 참고하여 JDK를 설치한다.
Install Burp Suite v2.0 공식 홈페이지 에서 burpsuite installer를 다운로드하여 설치한다.
$ ll burpsuite_pro_linux_v2_0_13beta.sh -rwxrwxr-x 1 jkpark jkpark 149290948 1월 3 20:47 burpsuite_pro_linux_v2_0_13beta.sh* 인스톨러 실행하여 설치를 진행한다. 설치 방법은 단순하다.
$ sudo ./burpsuite_pro_linux_v2_0_13beta.sh 설정 프록시를 사용중이라면 User options 탭에 Upstream Proxy Servers 란에 프록시를 추가한다.
burpsuite의 프록시 리스너는 Proxy 탭에 Options에서 확인할 수 있다.
브라우저 프록시 설정 브라우저의 프록시를 설정하여 burpsuite로 향하게한다.</description>
    </item>
    
    <item>
      <title>Install JDK11</title>
      <link>https://jkpark.github.io/blog/install_jdk11/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install_jdk11/</guid>
      <description>Installing JDK11 JDK를 설치하는 방법은 apt-get install default-jdk만 하면 된다. 하지만 설치되는 jdk의 버전은 10.0.2이다.
$ sudo apt-get install default-jdk $ java --version openjdk 10.0.2 2018-07-17 OpenJDK Runtime Environment (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4) OpenJDK 64-Bit Server VM (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4, mixed mode) 나는 jdk11을 설치하기 위해 수동으로 설치한다.
$ cd ~/Downloads $ wget https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz $ sudo mkdir /usr/lib/jvm $ sudo tar zxvf openjdk-11.0.1_linux-x64_bin.tar.gz --directory /usr/lib/jvm 확인
$ /usr/lib/jvm/jdk-11.0.1/bin/java --version openjdk 11.0.1 2018-10-16 OpenJDK Runtime Environment 18.</description>
    </item>
    
    <item>
      <title>Install Jekyll on Windows 7</title>
      <link>https://jkpark.github.io/blog/install-jekyll-on-windows7/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-jekyll-on-windows7/</guid>
      <description>이 포스트는 http://jekyll-windows.juthilo.com/ 를 참고 하였습니다.
Install Ruby and Ruby DevKit Ruby Download Page
다운로드 ruby v2.3.3 and devKit.
rubyinstaller-2.3.3-x64.exe DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe  Jekyll has some dependencies which, out of the box, only provide raw source code. To make them into fully functional executables, you’ll probably need to install the Development Kit.
 The download is a self-extracting archive. extract to C:\RubyDevKit
cmd 창에서
cd C:\RubyDevKit ruby dk.rb init init 후 C:\RubyDevKit\config.</description>
    </item>
    
    <item>
      <title>Setup for Atom Editor</title>
      <link>https://jkpark.github.io/blog/atom/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/atom/</guid>
      <description>설치 https://atom.io/ 에서 Installer 다운로드 후 Install.
Proxy 설정 C:\Users\Jungyu\.atom\.apmrc 파일에 다음 내용 추가.
https-proxy=http://address:port http-proxy=http://address:port strict-ssl=false Install Extends Packages Ctrl + , 로 Setting 패널을 열어 Install 항목에서 원하는 Package 이름을 검색 후 설치한다.
minimap  (https://atom.io/packages/minimap)
  (https://atom.io/packages/minimap-find-and-replace)
  (https://atom.io/packages/minimap-linter)
  (https://atom.io/packages/minimap-cursorline)
 file-icons  (https://atom.io/packages/file-icons)
 Jekyll  (https://atom.io/packages/jekyll)
  (https://atom.io/packages/language-liquid)
  (https://atom.io/packages/language-gfm2)
 </description>
    </item>
    
    <item>
      <title>burp suite 정리</title>
      <link>https://jkpark.github.io/blog/burp-suite/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/burp-suite/</guid>
      <description>프록시 설정 방법 메뉴 - Proxy - Options 에 Proxy Listeners 는 브라우저에서 나오는 request를 listen 한다.
127.0.0.1:8080 으로 설정 메뉴 - User Options - Upstream Proxy Servers 를 설정하면 아래와 같은 flow로 패킷이 지나간다. 브라우져 -&amp;gt; 127.0.0.1:8080 프록시 -&amp;gt; Burp Suite에서 catch -&amp;gt; Upstream Proxy Servers
   Enabled Dest Host Proxy Host Proxy Port     v 10.*      프록시 설정 바로가기 exe C:\Windows\System32\control.</description>
    </item>
    
    <item>
      <title>HTTP 공부</title>
      <link>https://jkpark.github.io/blog/http/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/http/</guid>
      <description>하이퍼텍스트 트랜스퍼 프로토콜(HTTP)는 HTML과 같은, 하이퍼미디어 문서 전송을 위한 응용-계층 프로토콜입니다. HTTP는 웹 브라우저와 웹 서버 사이의 통신을 위해 설계되었지만 다른 목적을 위해서도 사용될 수 있습니다. 이 프로토콜은 연결을 열고, 요청을 보낸 뒤 응답을 받을 때까지 대기하는 클라이언트를 이용하는 고전적인 클라이언트-서버 모델을 따릅니다. 또한 상태없는 프로토콜로, 이는 두 개의 요청 사이에 어떤 데이터(상태)도 서버가 유지하지 않는다는 것을 의미합니다. 종종 TCP / IP 계층을 기반으로 하지만, 모든 안정적인 전송 계층에서 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Setup Visual Studio Code</title>
      <link>https://jkpark.github.io/blog/visual-studio-code/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/visual-studio-code/</guid>
      <description>Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). Begin your journey with VS Code with these introductory videos.
Installation  Download the Visual Studio Code installer from https://code.</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 기본 설정</title>
      <link>https://jkpark.github.io/blog/setting-intellij-idea/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/setting-intellij-idea/</guid>
      <description>IntelliJ IDEA 16.3 기본 설정 Memory Heap Size 수정 C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2016.3.5\bin\idea.exe.vmoptions 파일을 열어 general memory policy를 수정한다.
-Xms256m -Xmx750m  Please note that very big Xmx and Xms values are not so good. In this case, GarbageCollector has to work with a big part of memory at a time and causes considerable hang-ups. On the other hand, too small values can lead to the OutOfMemory exception. The specified values provide enough memory and at the same time the GarbageCollector works often but rather fast.</description>
    </item>
    
    <item>
      <title>Windows 10 기본 설정</title>
      <link>https://jkpark.github.io/blog/windows-10-basic-settings/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/windows-10-basic-settings/</guid>
      <description>Windows 10 포맷 후 최적화 설정 방법 One Drive 제거 한번에 제거할 수 있는 커맨드 Github 페이지
@echo off cls set x86=&amp;#34;%SYSTEMROOT%\System32\OneDriveSetup.exe&amp;#34; set x64=&amp;#34;%SYSTEMROOT%\SysWOW64\OneDriveSetup.exe&amp;#34; echo Closing the OneDrive process. echo. taskkill /f /im OneDrive.exe &amp;gt; NUL 2&amp;gt;&amp;amp;1 ping 127.0.0.1 -n 5 &amp;gt; NUL 2&amp;gt;&amp;amp;1 echo Uninstalling OneDrive... echo. if exist %x64% ( %x64% /uninstall ) else ( %x86% /uninstall ) ping 127.0.0.1 -n 5 &amp;gt; NUL 2&amp;gt;&amp;amp;1 echo Removing OneDrive leftovers.</description>
    </item>
    
    <item>
      <title>Jekyll-now로 블로그 생성 및 Ubuntu 16.04에서 local-development</title>
      <link>https://jkpark.github.io/blog/jekyll-now-creation-and-local-development-on-ubuntu1604/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/jekyll-now-creation-and-local-development-on-ubuntu1604/</guid>
      <description>Jekyll + Github page 의 조합
history Jekyll 설치 jkpark@cactus:~$ gem install jekyll 버전 확인
jkpark@cactus:~$ jekyll -v jekyll 3.4.0 github-pages 설치 jkpark@cactus:~$ sudo gem install github-pages [sudo] password for jkpark: ... Fetching: nokogiri-1.6.8.1.gem (100%) Building native extensions. This could take a while... ERROR: Error installing github-pages: ERROR: Failed to build gem native extension. current directory: /var/lib/gems/2.3.0/gems/nokogiri-1.6.8.1/ext/nokogiri /usr/bin/ruby2.3 -r ./siteconf20170225-14571-taczen.rb extconf.rb mkmf.rb cant find header files for ruby at /usr/lib/ruby/include/ruby.h extconf failed, exit code 1 Gem files will remain installed in /var/lib/gems/2.</description>
    </item>
    
    <item>
      <title>NERD tree 개발버전, NERD tree git plugin 을 vundle로 설치</title>
      <link>https://jkpark.github.io/blog/install-nerdtree-for-git-via-vundle/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-nerdtree-for-git-via-vundle/</guid>
      <description>NERD Tree 란 아래 그림과 같이 vim에서 파일시스템을 탐색하고 파일을 열 수 있도록 도와주는 플러그인이다.
nerd tree git plugin은 vim 에서 git 저장소의 상태확인을 위해 쓴다.
History .vimrc를 열어 vundle 플러그인 삽입란에 아래 2라인을 추가한다.
Plugin &amp;#39;scrooloose/nerdtree&amp;#39; Plugin &amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39; 저장 후 vim 에서 :PluginInstall 입력
설치완료.</description>
    </item>
    
    <item>
      <title>Vundle 설치</title>
      <link>https://jkpark.github.io/blog/install-vundle/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-vundle/</guid>
      <description>Vundle 은 Vim 플러그인 관리 도구이다.
aaa 이라는 플러그인을 설치할려고 할때 오리지날 vim 시스템은
vim/ syntax/ aaa.vim indent/ aaa.vim 이런식으로 저장되는데
Vundle을 이용하면
vim/bundle/ aaa/ syntax/ aaa.vim indent/ aaa.vim 이렇게 저장된다.
aaa 플러그인을 bundle로서 관리하여 해당 플러그인의 모든 파일을 알맞은 디렉토리에 저장하고 관리하기 편하게 도와준다.
History Vundle Clone jkpark@cactus:~$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim vimrc 기본 설정 아래 내용을 .vimrc 파일의 제일 윗줄에 추가한다.
설치와 테스트를 위해 NERD Tree 플러그인을 설치할 것이다.</description>
    </item>
    
    <item>
      <title>토렌트 다운로드 완료 시 리스트에서 자동삭제</title>
      <link>https://jkpark.github.io/blog/auto-remove-torrent-when-download-completed/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/auto-remove-torrent-when-download-completed/</guid>
      <description>transmission-daemon 은 작업 시 꼭 service를 stop 한 상태에서 해야 수정작업이 적용이 된다.
jkpark@cactus:/storages/storage1/public/torrent$ sudo service transmission-daemon stop /etc/transmission-daemon/settings.json 파일을 열어 다음과 같이 수정한다.
&amp;quot;script-torrent-done-enabled&amp;quot;: true, &amp;quot;script-torrent-done-filename&amp;quot;: &amp;quot;/storages/storage1/public/torrent/auto_delete.sh&amp;quot;, /storages/storage1/public/torrent/auto_delete.sh 파일을 만들고 아래 내용을 입력한다.
#!/bin/sh # Transmission script to remove torrent from lists # The file for logging events from this script LOGFILE=/storages/storage1/public/torrent/auto_delete_log # Remote login details. TR_HOST=&amp;#34;9091 --auth=아이디:비밀번호&amp;#34; echo &amp;#34;`date &amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;` removed from list : $TR_TORRENT_NAME&amp;#34; &amp;gt;&amp;gt; $LOGFILE transmission-remote $TR_HOST -t $TR_TORRENT_ID --remove 저장 후 권한설정</description>
    </item>
    
    <item>
      <title>토렌트서버(Transmission-daemon) 구축 방법</title>
      <link>https://jkpark.github.io/blog/install-transmission-daemon-on-ubuntu1604/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-transmission-daemon-on-ubuntu1604/</guid>
      <description>history 다운로드 디렉토리 생성 downloads, incomplete 디렉토리 생성
jkpark@cactus:/storages/storage1/public/torrent$ ls -al 합계 16 drwxrwxr-x 4 jkpark jkpark 4096 10월 29 01:26 . drwxrwxrwx 13 nobody nogroup 4096 12월 28 21:43 .. drwxrwxrwx 12 jkpark jkpark 4096 12월 28 12:51 downloads drwxrwxrwx 2 jkpark jkpark 4096 10월 29 01:26 incomplete 원래 목적은 incomplete 디렉토리에 토렌트용 HDD를 마운트하고 이 위치에 다운로드해서 저장소의 부담을 줄이고 싶었지만 토렌트용 HDD가 고장났는지 인식이 안된다. 그러므로 다운로드를 downloads 디렉토리에 하도록 설정했다.</description>
    </item>
    
    <item>
      <title>Resilio를 이용한 동기화</title>
      <link>https://jkpark.github.io/blog/file-sync-using-resilio/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/file-sync-using-resilio/</guid>
      <description>스마트폰에서 찍은 사진을 서버에 백업하고 다른 스마트폰과 공유하기 위해 동기화 프로그램이 필요하였다. 구글 드라이브같은 클라우드 서비스를 이용하면 간단하게 동기화를 할 수 있지만, 3자에게 정보를 공유해야하고 용량 제한, 업로드 속도 등 여러가지 제약이 많다.
Resilio Sync는 device to device 동기화이기 때문에 이번 기회에 사용해보고 싶었다.
다른 싱크프로그램도 많지만 아이폰, 안드로이드 뿐만 아니라 리눅스, 윈도우 모든 OS에서 동작하는 싱크프로그램이 필요하기 때문에 Resilio를 택했다.
또한 Resilio Sync는 bitTorrent Sync 의 새로운 버전이고 토렌트방식으로 동기화를 한다.</description>
    </item>
    
    <item>
      <title>LEMP stack 에 Drupal8 설치방법</title>
      <link>https://jkpark.github.io/blog/install-drupal-on-lemp-stack/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-drupal-on-lemp-stack/</guid>
      <description>https://www.drupal.org/download 에서 최신버전의 바이너리를 확인
jkpark@cactus:/var/www/html$ sudo wget https://ftp.drupal.org/files/projects/drupal-8.2.2.zip --2016-11-09 14:26:53-- https://ftp.drupal.org/files/projects/drupal-8.2.2.zip Resolving ftp.drupal.org (ftp.drupal.org)... 151.101.76.68 접속 ftp.drupal.org (ftp.drupal.org)|151.101.76.68|:443... 접속됨. HTTP request sent, awaiting response... 200 OK Length: 21205013 (20M) [application/zip] Saving to: ‘drupal-8.2.2.zip’ drupal-8.2.2.zip 100%[===========================================&amp;gt;] 20.22M 6.32MB/s in 3.7s 2016-11-09 14:26:58 (5.53 MB/s) - ‘drupal-8.2.2.zip’ saved [21205013/21205013] jkpark@cactus:/var/www/html$ ls -al 합계 20728 drwxr-xr-x 2 www-data www-data 4096 11월 9 14:26 . drwxr-xr-x 3 root root 4096 11월 9 14:24 .</description>
    </item>
    
    <item>
      <title>LEMP stack 에 WordPress 설치방법</title>
      <link>https://jkpark.github.io/blog/install-wordpress-on-lemp-stack/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-wordpress-on-lemp-stack/</guid>
      <description>Drupal 8 설치 후 테마, 모듈 수가 너무 적어서 Drupal 7을 설치하려고 했지만 WordPress를 설치하여 차이를 느껴보고 싶었다.
WordPress vs Joomla vs Drupal
설치 방법은 https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-on-ubuntu-16-04 와 https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-nginx-on-ubuntu-14-04 를 참고하였다.
설치 방법 WordPress를 설치하기 전에 LEMP stack 이 설치되어있어야 하고, SSL이 활성화되어있어야 한다. 우분투 버전은 16.04 에서 진행하였다.
LEMP stack 설치 방법은 여기를 참고.
WordPress를 위한 Database 생성 및 유저 생성 jkpark@cactus:/var/www/html$ mysql -u root -p Enter password: Welcome to the MariaDB monitor.</description>
    </item>
    
    <item>
      <title>How To Install Nginx, MariaDB10, PHP7(LEMP stack) on Ubuntu16.04</title>
      <link>https://jkpark.github.io/blog/install-lemp-stack-on-ubuntu1604/</link>
      <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-lemp-stack-on-ubuntu1604/</guid>
      <description>LEMP Stack 이란
Linux, Nginx, MariaDB, PHP를 조합하여 줄인말이다.
Apache vs Nginx
Nginx(엔진X)는 Apache의 잘 사용하지 않는 기능을 제외하고 새로운 시대의 요청에 부응하여 만들어진 웹 서버이다.
PHP 속도 테스트
https://news.netcraft.com/archives/2016/02/22/february-2016-web-server-survey.html
MariaDB 는 MySQL의 불확실한 라이선스 상태에 반발하여 만들어졌으며 MariaDB 5.5버전까지는 모든 MySQL의 특징을 가지고 있었다. 5.5버전 이후 MariaDB만의 색깔을 더 분명히 하고자 개발판을 10.x로 변경하였다.
Nginx Web Server 설치 install Nginx
jkpark@cactus:~$ sudo apt-get install nginx [sudo] password for jkpark: 패키지 목록을 읽는 중입니다.</description>
    </item>
    
    <item>
      <title>How to install vsftpd on ubuntu</title>
      <link>https://jkpark.github.io/blog/install-vsftpd-on-ubuntu1604/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/install-vsftpd-on-ubuntu1604/</guid>
      <description>jkpark@cactus:~$ sudo apt-get install vsftpd 다음 새 패키지를 설치할 것입니다: vsftpd 0개 업그레이드, 1개 새로 설치, 0개 제거 및 6개 업그레이드 안 함. 115 k바이트 아카이브를 받아야 합니다. 이 작업 후 336 k바이트의 디스크 공간을 더 사용하게 됩니다. 받기:1 http://kr.archive.ubuntu.com/ubuntu xenial/main amd64 vsftpd amd64 3.0.3-3ubuntu2 [115 kB] 내려받기 115 k바이트, 소요시간 0초 (974 k바이트/초) 패키지를 미리 설정하는 중입니다... Selecting previously unselected package vsftpd. (데이터베이스 읽는중 ...현재 211923개의 파일과 디렉터리가 설치되어 있습니다.</description>
    </item>
    
    <item>
      <title>byteToHexString</title>
      <link>https://jkpark.github.io/blog/byte-to-hex-string/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/byte-to-hex-string/</guid>
      <description>public class Main { public static void main(String[] args) { System.out.print(byteToHexString(&amp;#34;abcde&amp;#34;.getBytes())); } public static String byteToHexString(byte[] b) { char[] digit = { &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39; }; StringBuffer sb = new StringBuffer(); for (byte i : b) { sb.append(digit[((i &amp;amp; 0xF0) &amp;gt;&amp;gt; 4)]); sb.append(digit[i &amp;amp; 0x0F] + &amp;#34; &amp;#34;); } return sb.toString(); } } </description>
    </item>
    
    <item>
      <title>날짜 표현 DateFormat, Custom Date Text View</title>
      <link>https://jkpark.github.io/blog/date-format-custom-date-text-view/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/date-format-custom-date-text-view/</guid>
      <description>Date today; String output; SimpleDateFormat formatter; formatter = new SimpleDateFormat(pattern, currentLocale); today = new Date(); output = formatter.format(today); System.out.println(pattern + &amp;#34; &amp;#34; + output); Customized Date and Time Formats |Pattern|Output| |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| |dd.MM.yy|30.06.09| |yyyy.MM.dd G &amp;lsquo;at&amp;rsquo; hh:mm:ss z|2009.06.30 AD at 08:29:36 PDT| |EEE, MMM d, &amp;lsquo;&amp;lsquo;yy|Tue, Jun 30, &amp;lsquo;09| |h:mm a|8:29 PM| |H:mm|8:29| |H:mm:ss:SSS|8:28:36:249| |K:mm a,z|8:29 AM,PDT| |yyyy.MMMMM.dd GGG hh:mm aaa|2009.June.30 AD 08:29 AM|
Custom Date Text View  </description>
    </item>
    
    <item>
      <title>Changing keymap on ubuntu</title>
      <link>https://jkpark.github.io/blog/change-keymap/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/change-keymap/</guid>
      <description>The tools to manipulate the keyboard layout on the virtual consoles are loadkeys, dumpkeys and showkeys. Read their manpages and inform yourself about their intricacies.
Note that these tools only work in a virtual console, not in a terminal emulator in X.
Save your current keyboard layout: $ dumpkeys &amp;gt; backup.kmap In case something goes wrong you might be able restore your keymap using the command:
$ sudo loadkeys backup.kmap If the keyboard is so messed up that you can&amp;rsquo;t even do this then your only option not involving ancient kernel magic is to reboot.</description>
    </item>
    
    <item>
      <title>android(java) 파일 저장 후 리부팅 시 저장안되어 있는 현상</title>
      <link>https://jkpark.github.io/blog/file-saving-bug/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/file-saving-bug/</guid>
      <description>android에서 FileOutputStream 의 write();, flush(); 했는데도 리부팅 시 간헐적으로 파일이 생성되지 않았거나 파일 내 데이터가 변하지 않을 때가 있다.
FileOutputStream 의 flush(); 가 버퍼를 비우는 기능만 수행하고 실제 physical device에 데이터를 저장하지 않아 파일에 데이터를 쓰기까지의 딜레이가 생기는 것이다.
이 때 fos.getFD().sync();의 메서드로 파일시스템 내부의 캐쉬를 모두 physical device로 저장한다.
FileOutputStream fos = this.openFileOutput(filename, Context.MODE_PRIVATE); fos.write(obj.toString().getBytes()); fos.flush(); fos.getFD().sync(); fos.close(); </description>
    </item>
    
    <item>
      <title>서비스 바인드와 핸들러 구현 (옵저버 패턴)</title>
      <link>https://jkpark.github.io/blog/service-bind-and-handler-observer-pattern/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/service-bind-and-handler-observer-pattern/</guid>
      <description>Activity.java  MessengerService.java </description>
    </item>
    
    <item>
      <title>edittext 특수문자 제한, 한글만 입력</title>
      <link>https://jkpark.github.io/blog/restrict-input-on-edittext/</link>
      <pubDate>Thu, 07 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/restrict-input-on-edittext/</guid>
      <description>영문 + 숫자
public InputFilter filterAlphaNum = new InputFilter() { public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { Pattern ps = Pattern.compile(&amp;#34;^[a-zA-Z0-9]*$&amp;#34;); if (!ps.matcher(source).matches()) { return &amp;#34;&amp;#34;; } return null; } }; 한글
public InputFilter filterKor = new InputFilter() { public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { Pattern ps = Pattern.compile(&amp;#34;^[ㄱ-ㅣ가-힣]*$&amp;#34;); if (!ps.matcher(source).matches()) { return &amp;#34;&amp;#34;; } return null; } }; editText.</description>
    </item>
    
  </channel>
</rss>