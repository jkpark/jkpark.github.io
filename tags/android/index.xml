<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on jkpark&#39;s blog</title>
    <link>https://jkpark.github.io/tags/android/</link>
    <description>Recent content in Android on jkpark&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 15 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jkpark.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>byteToHexString</title>
      <link>https://jkpark.github.io/blog/byte-to-hex-string/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/byte-to-hex-string/</guid>
      <description>public class Main { public static void main(String[] args) { System.out.print(byteToHexString(&amp;#34;abcde&amp;#34;.getBytes())); } public static String byteToHexString(byte[] b) { char[] digit = { &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39; }; StringBuffer sb = new StringBuffer(); for (byte i : b) { sb.append(digit[((i &amp;amp; 0xF0) &amp;gt;&amp;gt; 4)]); sb.append(digit[i &amp;amp; 0x0F] + &amp;#34; &amp;#34;); } return sb.toString(); } } </description>
    </item>
    
    <item>
      <title>날짜 표현 DateFormat, Custom Date Text View</title>
      <link>https://jkpark.github.io/blog/date-format-custom-date-text-view/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/date-format-custom-date-text-view/</guid>
      <description>Date today; String output; SimpleDateFormat formatter; formatter = new SimpleDateFormat(pattern, currentLocale); today = new Date(); output = formatter.format(today); System.out.println(pattern + &amp;#34; &amp;#34; + output); Customized Date and Time Formats |Pattern|Output| |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| |dd.MM.yy|30.06.09| |yyyy.MM.dd G &amp;lsquo;at&amp;rsquo; hh:mm:ss z|2009.06.30 AD at 08:29:36 PDT| |EEE, MMM d, &amp;lsquo;&amp;lsquo;yy|Tue, Jun 30, &amp;lsquo;09| |h:mm a|8:29 PM| |H:mm|8:29| |H:mm:ss:SSS|8:28:36:249| |K:mm a,z|8:29 AM,PDT| |yyyy.MMMMM.dd GGG hh:mm aaa|2009.June.30 AD 08:29 AM|
Custom Date Text View  </description>
    </item>
    
    <item>
      <title>android(java) 파일 저장 후 리부팅 시 저장안되어 있는 현상</title>
      <link>https://jkpark.github.io/blog/file-saving-bug/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/file-saving-bug/</guid>
      <description>android에서 FileOutputStream 의 write();, flush(); 했는데도 리부팅 시 간헐적으로 파일이 생성되지 않았거나 파일 내 데이터가 변하지 않을 때가 있다.
FileOutputStream 의 flush(); 가 버퍼를 비우는 기능만 수행하고 실제 physical device에 데이터를 저장하지 않아 파일에 데이터를 쓰기까지의 딜레이가 생기는 것이다.
이 때 fos.getFD().sync();의 메서드로 파일시스템 내부의 캐쉬를 모두 physical device로 저장한다.
FileOutputStream fos = this.openFileOutput(filename, Context.MODE_PRIVATE); fos.write(obj.toString().getBytes()); fos.flush(); fos.getFD().sync(); fos.close(); </description>
    </item>
    
    <item>
      <title>서비스 바인드와 핸들러 구현 (옵저버 패턴)</title>
      <link>https://jkpark.github.io/blog/service-bind-and-handler-observer-pattern/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/service-bind-and-handler-observer-pattern/</guid>
      <description>Activity.java  MessengerService.java </description>
    </item>
    
    <item>
      <title>edittext 특수문자 제한, 한글만 입력</title>
      <link>https://jkpark.github.io/blog/restrict-input-on-edittext/</link>
      <pubDate>Thu, 07 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jkpark.github.io/blog/restrict-input-on-edittext/</guid>
      <description>영문 + 숫자
public InputFilter filterAlphaNum = new InputFilter() { public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { Pattern ps = Pattern.compile(&amp;#34;^[a-zA-Z0-9]*$&amp;#34;); if (!ps.matcher(source).matches()) { return &amp;#34;&amp;#34;; } return null; } }; 한글
public InputFilter filterKor = new InputFilter() { public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { Pattern ps = Pattern.compile(&amp;#34;^[ㄱ-ㅣ가-힣]*$&amp;#34;); if (!ps.matcher(source).matches()) { return &amp;#34;&amp;#34;; } return null; } }; editText.</description>
    </item>
    
  </channel>
</rss>